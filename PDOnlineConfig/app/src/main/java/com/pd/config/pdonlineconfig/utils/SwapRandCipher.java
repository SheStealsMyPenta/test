/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.pd.config.pdonlineconfig.utils;

/**
 * @author hr018
 */
public class SwapRandCipher {
    /*
     * private constructor, can't create object of this class
     */
    private SwapRandCipher() {
    }

    /*
     * static swap table for swap data
     */
    private static final int ENCRYPT_TABLE[] = {
            0xC0, 0xA2, 0x8A, 0x77, 0x59, 0x70, 0x4A, 0xDE,
            0xC6, 0x7D, 0x85, 0xEE, 0x8F, 0x6D, 0x19, 0x3E,
            0xEB, 0x46, 0x61, 0xDC, 0x30, 0x13, 0xBF, 0x65,
            0x02, 0x56, 0xD9, 0x4D, 0x0A, 0xDD, 0xB0, 0x86,
            0x06, 0x7E, 0xB7, 0x97, 0x5B, 0xF9, 0x38, 0xDF,
            0xBB, 0xC3, 0xA8, 0x66, 0x14, 0x83, 0xAF, 0x9E,
            0x36, 0xCB, 0xC1, 0xB6, 0x00, 0x22, 0x2A, 0xA4,
            0xD0, 0xA5, 0x12, 0xA3, 0x6C, 0xF2, 0xB8, 0x9A,
            0x3B, 0x64, 0x9F, 0xC7, 0x54, 0x33, 0xDA, 0x01,
            0x99, 0xB9, 0x09, 0x3D, 0x1A, 0xF0, 0x0E, 0x8D,
            0xD6, 0x3F, 0x05, 0xB5, 0x7B, 0xE7, 0x9C, 0x43,
            0xC5, 0xF3, 0x28, 0x71, 0x1F, 0x92, 0xFD, 0xAC,
            0x91, 0x08, 0x45, 0x9D, 0x0F, 0xAE, 0x80, 0x53,
            0xE9, 0xF6, 0xB3, 0x7A, 0x16, 0xAA, 0xB2, 0x52,
            0xBD, 0x40, 0x41, 0x3C, 0xA0, 0x25, 0x8C, 0x23,
            0xD7, 0xD1, 0x1B, 0xDB, 0x2D, 0xA1, 0x5D, 0x34,
            0x29, 0x90, 0x2E, 0x74, 0x82, 0x39, 0x1D, 0xD5,
            0x5A, 0x88, 0x63, 0xC4, 0x81, 0x79, 0x50, 0x98,
            0xCF, 0xED, 0x5F, 0x17, 0x2B, 0xB1, 0x89, 0x26,
            0xF1, 0xE1, 0x20, 0x87, 0x93, 0x48, 0x21, 0xEC,
            0x4E, 0xE4, 0xA6, 0x94, 0x95, 0x4F, 0x60, 0xE0,
            0xBE, 0xD3, 0x6A, 0x2C, 0x6B, 0xCA, 0x18, 0x11,
            0xFA, 0x8E, 0x44, 0x8B, 0xAB, 0xB4, 0x1E, 0x9B,
            0x07, 0x10, 0x76, 0x31, 0xEF, 0x37, 0x4B, 0x62,
            0xE8, 0x51, 0xCC, 0xC2, 0xBA, 0x27, 0x5C, 0x67,
            0xAD, 0xFF, 0xD2, 0xBC, 0xFE, 0x6E, 0x42, 0x32,
            0x78, 0x69, 0x49, 0xFC, 0x55, 0x57, 0x6F, 0x96,
            0x1C, 0xF4, 0x4C, 0x03, 0x7C, 0x3A, 0xE2, 0x72,
            0x58, 0x68, 0xC8, 0x0C, 0xEA, 0xD8, 0x75, 0xCE,
            0xCD, 0x47, 0xF8, 0x24, 0xF7, 0x73, 0x0B, 0x2F,
            0xE6, 0x5E, 0x04, 0xC9, 0x35, 0xA7, 0xD4, 0xF5,
            0x15, 0xFB, 0x0D, 0xA9, 0x7F, 0xE3, 0x84, 0xE5
    };
    private static final int DECRYPT_TABLE[] = {
            0x34, 0x47, 0x18, 0xDB, 0xF2, 0x52, 0x20, 0xB8,
            0x61, 0x4A, 0x1C, 0xEE, 0xE3, 0xFA, 0x4E, 0x64,
            0xB9, 0xAF, 0x3A, 0x15, 0x2C, 0xF8, 0x6C, 0x93,
            0xAE, 0x0E, 0x4C, 0x7A, 0xD8, 0x86, 0xB6, 0x5C,
            0x9A, 0x9E, 0x35, 0x77, 0xEB, 0x75, 0x97, 0xC5,
            0x5A, 0x80, 0x36, 0x94, 0xAB, 0x7C, 0x82, 0xEF,
            0x14, 0xBB, 0xCF, 0x45, 0x7F, 0xF4, 0x30, 0xBD,
            0x26, 0x85, 0xDD, 0x40, 0x73, 0x4B, 0x0F, 0x51,
            0x71, 0x72, 0xCE, 0x57, 0xB2, 0x62, 0x11, 0xE9,
            0x9D, 0xD2, 0x06, 0xBE, 0xDA, 0x1B, 0xA0, 0xA5,
            0x8E, 0xC1, 0x6F, 0x67, 0x44, 0xD4, 0x19, 0xD5,
            0xE0, 0x04, 0x88, 0x24, 0xC6, 0x7E, 0xF1, 0x92,
            0xA6, 0x12, 0xBF, 0x8A, 0x41, 0x17, 0x2B, 0xC7,
            0xE1, 0xD1, 0xAA, 0xAC, 0x3C, 0x0D, 0xCD, 0xD6,
            0x05, 0x5B, 0xDF, 0xED, 0x83, 0xE6, 0xBA, 0x03,
            0xD0, 0x8D, 0x6B, 0x54, 0xDC, 0x09, 0x21, 0xFC,
            0x66, 0x8C, 0x84, 0x2D, 0xFE, 0x0A, 0x1F, 0x9B,
            0x89, 0x96, 0x02, 0xB3, 0x76, 0x4F, 0xB1, 0x0C,
            0x81, 0x60, 0x5D, 0x9C, 0xA3, 0xA4, 0xD7, 0x23,
            0x8F, 0x48, 0x3F, 0xB7, 0x56, 0x63, 0x2F, 0x42,
            0x74, 0x7D, 0x01, 0x3B, 0x37, 0x39, 0xA2, 0xF5,
            0x2A, 0xFB, 0x6D, 0xB4, 0x5F, 0xC8, 0x65, 0x2E,
            0x1E, 0x95, 0x6E, 0x6A, 0xB5, 0x53, 0x33, 0x22,
            0x3E, 0x49, 0xC4, 0x28, 0xCB, 0x70, 0xA8, 0x16,
            0x00, 0x32, 0xC3, 0x29, 0x8B, 0x58, 0x08, 0x43,
            0xE2, 0xF3, 0xAD, 0x31, 0xC2, 0xE8, 0xE7, 0x90,
            0x38, 0x79, 0xCA, 0xA9, 0xF6, 0x87, 0x50, 0x78,
            0xE5, 0x1A, 0x46, 0x7B, 0x13, 0x1D, 0x07, 0x27,
            0xA7, 0x99, 0xDE, 0xFD, 0xA1, 0xFF, 0xF0, 0x55,
            0xC0, 0x68, 0xE4, 0x10, 0x9F, 0x91, 0x0B, 0xBC,
            0x4D, 0x98, 0x3D, 0x59, 0xD9, 0xF7, 0x69, 0xEC,
            0xEA, 0x25, 0xB0, 0xF9, 0xD3, 0x5E, 0xCC, 0xC9
    };

    /*
     * public method 'getPublicKey' for build a random Key for encrypt or decrypt
     */
    public static int getPublicKey() {
        int nkey;
        float fValue;

        fValue = (float) (Math.random() * 256.0);
        nkey = (int) fValue;
        return nkey;
    }

    /*
     * public method 'encrypt' for encrypt data
     */
    public static void encrypt(byte[] data, int offset, int length, int nPublicKey) {
        int key;
        int i, len, value;

        len = data.length - offset;
        if (len > length) {
            len = length;
        }

        if (len <= 0) {
            return;
        }

        key = getPrivateKey(nPublicKey&0xff);
        for (i = 0; i < len; i++) {
            value = ((data[i + offset] >= 0) ? data[i + offset] : (256 + data[i + offset]));
            value = ENCRYPT_TABLE[value ^ key];
            data[i + offset] = (byte) (value & 0xFF);
        }
    }

    /*
     * public method 'decrypt' for decrypt data
     */
    public static void decrypt(byte[] data, int offset, int length, int nPublicKey) {
        int key;
        int i, len, value;
        len = data.length - offset;
        if (len > length) {
            len = length;
        }

        if (len <= 0) {
            return;
        }

        key = getPrivateKey(nPublicKey&0xff);
        for (i = 0; i < len; i++) {
            value = ((data[i + offset] >= 0) ? data[i + offset] : (256 + data[i + offset]));
            value = DECRYPT_TABLE[value] ^ key;
            data[i + offset] = (byte) (value & 0xFF);
        }
    }

    /*
     * private method 'getPrivateKey' for convert public key to private key
     */
    private static int getPrivateKey(int nPublicKey) {
        int key;
        key = nPublicKey ^ 0x6C;
        key += (nPublicKey ^ 0xF0);
        key += (nPublicKey ^ 0x49);
        key += (nPublicKey ^ 0xC1);
        key += (nPublicKey ^ 0x64);
        key += (nPublicKey ^ 0x77);
        key = key & 0xFF;

        return key;
    }
}
